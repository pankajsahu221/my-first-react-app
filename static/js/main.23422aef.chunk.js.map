{"version":3,"sources":["Avatarlist.js","Avatar.js","serviceWorker.js","index.js"],"names":["AvatarList","props","className","src","name","alt","work","Avatar","state","this","setState","Avatarlistarray","id","Avatarcards","map","avatarcards","index","Avatarlist","key","onClick","nameChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAYeA,G,MAVI,SAACC,GAChB,OACI,yBAAKC,UAAU,eACX,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,WAC3D,4BAAKJ,EAAMG,MACX,2BAAIH,EAAMK,SCqDPC,E,kDArDX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTJ,KAAM,2BAHD,E,yDAOTK,KAAKC,SAAS,CACVN,KAAM,mC,+BAIL,IAAD,OAEEO,EAAkB,CACpB,CACIC,GAAK,EACLR,KAAO,cACPE,KAAO,iBAEX,CACIM,GAAK,EACLR,KAAO,YACPE,KAAO,OAEX,CACIM,GAAK,EACLR,KAAO,SACPE,KAAO,YAEX,CACIM,GAAK,EACLR,KAAO,UACPE,KAAO,YAITO,EAAcF,EAAgBG,KAAK,SAACC,EAAaC,GACnD,OAAO,kBAACC,EAAD,CAAYC,IAAKF,EAAOJ,GAAID,EAAgBK,GAAOJ,GACtCR,KAAMO,EAAgBK,GAAOZ,KAC7BE,KAAMK,EAAgBK,GAAOV,UAGrD,OACI,yBAAKJ,UAAU,YACX,gCAAOO,KAAKD,MAAMJ,KAAlB,KACA,6BAAMS,GACN,4BAAQM,QAAU,kBAAK,EAAKC,eAA5B,iB,GAjDKC,aCODC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAQ,6BACb,kBAAC,EAAD,OACIC,SAASC,eAAe,SDwH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.23422aef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AvatarList = (props) =>{\r\n    return(\r\n        <div className=\"avatar-card\">\r\n            <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"Avatar\"/> \r\n            <h1>{props.name}</h1>\r\n            <p>{props.work}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvatarList;","import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Avatar.css'\r\nimport Avatarlist from './Avatarlist';\r\n\r\nclass Avatar extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            name: \"Welcome to Avatar World\" \r\n        }\r\n    }\r\n    nameChange(){\r\n        this.setState({\r\n            name: \"You Just Clicked the button!\"\r\n        })\r\n    }\r\n\r\n    render(){\r\n            // making an array to store the data\r\n        const Avatarlistarray = [\r\n            {\r\n                id : 1,\r\n                name : \"Pankaj Sahu\",\r\n                work : \"Web Developer\"  \r\n            },\r\n            {\r\n                id : 2,\r\n                name : \"Ramu Kaka\",\r\n                work : \"CEO\"  \r\n            },\r\n            {\r\n                id : 3,\r\n                name : \"Gabbar\",\r\n                work : \"Frontend\"  \r\n            },\r\n            {\r\n                id : 4,\r\n                name : \"Hrithik\",\r\n                work : \"Backend\"  \r\n            }\r\n        ]\r\n\r\n        const Avatarcards = Avatarlistarray.map( (avatarcards, index) =>{\r\n            return <Avatarlist key={index} id={Avatarlistarray[index].id} \r\n                                name={Avatarlistarray[index].name}\r\n                                work={Avatarlistarray[index].work}/>\r\n        })\r\n\r\n        return ( \r\n            <div className=\"mainpage\">\r\n                <h1> { this.state.name } </h1>\r\n                <div>{Avatarcards}</div>\r\n                <button onClick= {()=> this.nameChange() } > Do it !</button>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Avatar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Demo from './Demo';\nimport Avatar from './Avatar';\nimport Avatarlist from './Avatarlist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <div>\n    <Avatar/>\n</div>, document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}